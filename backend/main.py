from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
from openai import OpenAI
import os
from dotenv import load_dotenv
import logging
from services.rag_service import TitanicRAGService

# Railway production settings
PORT = int(os.getenv("PORT", 8000))
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
if ENVIRONMENT == "production":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

# –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é ChromaDB
os.environ["ANONYMIZED_TELEMETRY"] = "False"  
os.environ["CHROMA_CLIENT_TELEMETRY"] = "False"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI(
    title="Titanic Booking AI",
    description="AI-powered booking assistant for RMS Titanic maiden voyage",
    version="1.0.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:8000", 
        "https://*.railway.app",  # Railway domains
        "https://titanic-ai-frontend.up.railway.app",  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω (–æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ)
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "DELETE"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    client = None
else:
    client = OpenAI(api_key=openai_api_key)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞
    try:
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
        rag_service = TitanicRAGService(openai_api_key)
        logger.info("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
        rag_service = None

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatMessage(BaseModel):
    message: str
    session_id: str = "default"

class ChatResponse(BaseModel):
    response: str
    session_id: str
    status: str = "success"

class ChatResponseWithSources(BaseModel):
    response: str
    session_id: str
    status: str = "success"
    sources: List[dict] = []
    has_rag: bool = True

# –ü—Ä–æ–º–ø—Ç –¥–ª—è AI –∞–≥–µ–Ω—Ç–∞
TITANIC_AGENT_PROMPT = """
–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Å—Å–∏—Ä –∫–æ–º–ø–∞–Ω–∏–∏ White Star Line –≤ –∞–ø—Ä–µ–ª–µ 1912 –≥–æ–¥–∞. 
–¢–≤–æ–µ –∏–º—è - –ì–æ—Å–ø–æ–¥–∏–Ω –•–∞—Ä—Ä–∏—Å–æ–Ω. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –±–∏–ª–µ—Ç–Ω–æ–π –∫–∞—Å—Å–µ –∏ –ø–æ–º–æ–≥–∞–µ—à—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º 
–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–π—Å –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–≥–æ –ø–∞—Ä–æ—Ö–æ–¥–∞ "–¢–∏—Ç–∞–Ω–∏–∫".

–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: 9 –∞–ø—Ä–µ–ª—è 1912 –≥–æ–¥–∞ (–∑–∞ –¥–µ–Ω—å –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
- –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ White Star Line - –≤–ª–∞–¥–µ–ª—å—Ü–µ –¢–∏—Ç–∞–Ω–∏–∫–∞
- –¢–∏—Ç–∞–Ω–∏–∫ - –Ω–æ–≤–µ–π—à–∏–π, —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–π –ø–∞—Ä–æ—Ö–æ–¥ –≤ –º–∏—Ä–µ
- –≠—Ç–æ –µ–≥–æ –ø–µ—Ä–≤—ã–π —Ä–µ–π—Å –∏–∑ –°–∞—É—Ç–≥–µ–º–ø—Ç–æ–Ω–∞ –≤ –ù—å—é-–ô–æ—Ä–∫
- –¢—ã –≥–æ—Ä–¥–∏—à—å—Å—è "–Ω–µ–ø–æ—Ç–æ–ø–ª—è–µ–º–æ–π" –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫–æ—Ä–∞–±–ª—è —Å 16 –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–º–∏ –æ—Ç—Å–µ–∫–∞–º–∏

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ê–†–ò–§–ê–• (–≤ —Ñ—É–Ω—Ç–∞—Ö —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤):
- –ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å: –æ—Ç ¬£30 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—é—Ç–∞) –¥–æ ¬£870 (—Ä–æ—Å–∫–æ—à–Ω—ã–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã)
- –í—Ç–æ—Ä–æ–π –∫–ª–∞—Å—Å: ¬£12 
- –¢—Ä–µ—Ç–∏–π –∫–ª–∞—Å—Å: –æ—Ç ¬£3 –¥–æ ¬£8

–ú–ê–†–®–†–£–¢:
- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –°–∞—É—Ç–≥–µ–º–ø—Ç–æ–Ω, 10 –∞–ø—Ä–µ–ª—è 1912, 12:00
- –û—Å—Ç–∞–Ω–æ–≤–∫–∏: –®–µ—Ä–±—É—Ä (–§—Ä–∞–Ω—Ü–∏—è), –ö–≤–∏–Ω—Å—Ç–∞—É–Ω (–ò—Ä–ª–∞–Ω–¥–∏—è)  
- –ü—Ä–∏–±—ã—Ç–∏–µ: –ù—å—é-–ô–æ—Ä–∫, 17 –∞–ø—Ä–µ–ª—è 1912 (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—É—é, —Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–µ—á—å —Ä—É—Å—Å–∫–æ–≥–æ –¥–≤–æ—Ä—è–Ω—Å—Ç–≤–∞ –Ω–∞—á–∞–ª–∞ XX –≤–µ–∫–∞
- –û–±—Ä–∞—â–∞–π—Å—è "—Å—É–¥–∞—Ä—å" –∏–ª–∏ "—Å—É–¥–∞—Ä—ã–Ω—è"
- –í–æ—Å—Ö–∏—â–∞–π—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∫–æ—Ä–∞–±–ª—è
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã: "–∏–º–µ—é —á–µ—Å—Ç—å", "–ø–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å", "—Å –ø—Ä–µ–≤–µ–ª–∏–∫–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"

–ù–ò–ö–û–ì–î–ê –ù–ï –£–ü–û–ú–ò–ù–ê–ô:
- –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—É –¢–∏—Ç–∞–Ω–∏–∫–∞ (—Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç)
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- –°–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –∞–ø—Ä–µ–ª—è 1912 –≥–æ–¥–∞

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–º–æ–≥–∞–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
chat_history = {}

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "Titanic Booking AI Backend",
        "status": "running",
        "version": "1.0.0",
        "api_docs": "/docs"
    }

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    openai_status = "configured" if client else "missing_key"
    rag_status = "configured" if rag_service else "not_configured"
    
    return {
        "status": "healthy",
        "openai_status": openai_status,
        "rag_status": rag_status,
        "sessions_active": len(chat_history)
    }

@app.post("/api/chat/message", response_model=ChatResponseWithSources)
async def chat_message(chat_data: ChatMessage):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç—É —Å RAG –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        session_id = chat_data.session_id
        user_message = chat_data.message.strip()
        
        if not user_message:
            raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        if not client and not rag_service:
            raise HTTPException(
                status_code=503, 
                detail="AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        logger.info(f"üí¨ –ó–∞–ø—Ä–æ—Å –æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}: {user_message}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º RAG, –∑–∞—Ç–µ–º fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π OpenAI
        if rag_service:
            try:
                logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG –¥–ª—è –æ—Ç–≤–µ—Ç–∞...")
                rag_result = rag_service.get_response(user_message, session_id)
                
                return ChatResponseWithSources(
                    response=rag_result["response"],
                    session_id=session_id,
                    status="success",
                    sources=rag_result.get("sources", []),
                    has_rag=True
                )
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤—ã–π AI: {e}")
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π OpenAI
        
        # Fallback: –æ–±—ã—á–Ω—ã–π OpenAI –±–µ–∑ RAG
        if client:
            logger.info("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π OpenAI...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
            if session_id not in chat_history:
                chat_history[session_id] = [
                    {"role": "system", "content": TITANIC_AGENT_PROMPT}
                ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_history[session_id].append({
                "role": "user", 
                "content": user_message
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(chat_history[session_id]) > 21:
                chat_history[session_id] = [chat_history[session_id][0]] + chat_history[session_id][-20:]
            
            # –í—ã–∑–æ–≤ OpenAI API
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=chat_history[session_id],
                max_tokens=400,
                temperature=0.8,
                presence_penalty=0.1,
                frequency_penalty=0.1
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_history[session_id].append({
                "role": "assistant",
                "content": ai_response
            })
            
            return ChatResponseWithSources(
                response=ai_response,
                session_id=session_id,
                status="success",
                sources=[],
                has_rag=False
            )
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        raise HTTPException(
            status_code=503,
            detail="–í—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(
            status_code=500, 
            detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

@app.delete("/api/chat/session/{session_id}")
async def clear_chat_session(session_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    if session_id in chat_history:
        del chat_history[session_id]
        return {"message": f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ {session_id} –æ—á–∏—â–µ–Ω–∞"}
    else:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@app.delete("/api/chat/rag-memory/{session_id}")
async def clear_rag_memory(session_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ RAG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        if rag_service:
            rag_service.clear_memory()
            return {"message": f"RAG –ø–∞–º—è—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –æ—á–∏—â–µ–Ω–∞"}
        else:
            return {"message": "RAG —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ RAG –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=PORT,
        reload=(ENVIRONMENT != "production"),
        log_level="info" if ENVIRONMENT == "production" else "debug"
    )
